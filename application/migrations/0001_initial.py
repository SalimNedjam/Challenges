# Generated by Django 2.2.3 on 2019-08-20 14:29

import application.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenges',
            fields=[
                ('challenge_id', models.AutoField(primary_key=True, serialize=False)),
                ('is_visible', models.BooleanField(default=False)),
                ('title', models.TextField()),
                ('limitDate', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField()),
                ('nbSubmit', models.IntegerField(default=0)),
                ('nbStudent', models.IntegerField(default=0)),
                ('inputExt', models.TextField()),
                ('inputParam', models.TextField()),
                ('command', models.TextField()),
                ('scriptFile', models.FileField(upload_to=application.models.script_path)),
                ('args', djongo.models.fields.ListField(default=[])),
                ('outputs', djongo.models.fields.ListField(default=[])),
                ('scoreKeys', djongo.models.fields.ListField(default=[])),
                ('enable_edit_group', models.BooleanField(default=False)),
                ('enable_delete_submission', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'challenges',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('freqSubmit', models.IntegerField(default=0)),
                ('nbSubmit', models.IntegerField(default=-1)),
                ('nbStudent', models.IntegerField(default=-1)),
                ('owner', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'course',
            },
        ),
        migrations.CreateModel(
            name='TruthFile',
            fields=[
                ('file_id', models.AutoField(primary_key=True, serialize=False)),
                ('file', models.FileField(default='', upload_to=application.models.truth_path)),
                ('param', models.TextField()),
                ('challenge', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Challenges')),
                ('course', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Course')),
            ],
            options={
                'db_table': 'truthFile',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submit', models.DateTimeField(default=django.utils.timezone.now)),
                ('score', djongo.models.fields.ListField(default=[])),
                ('input_file', models.FileField(upload_to=application.models.directory_path)),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('FAIL', 'FAIL')], default='PENDING', max_length=10)),
                ('tags', djongo.models.fields.ListField(default=[])),
                ('challenge', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Challenges')),
                ('user', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'submission',
            },
        ),
        migrations.CreateModel(
            name='Output',
            fields=[
                ('file_id', models.AutoField(primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to=application.models.outputs_path)),
                ('ext', models.TextField()),
                ('param', models.TextField()),
                ('course', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Course')),
                ('submission', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Submission')),
            ],
            options={
                'db_table': 'output',
            },
        ),
        migrations.CreateModel(
            name='Management',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_course_admin', models.BooleanField(default=False)),
                ('is_group_admin', models.BooleanField(default=False)),
                ('course', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Course')),
                ('user', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'management',
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.IntegerField()),
                ('owner', models.BooleanField(default=False)),
                ('challenge', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Challenges')),
                ('user', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Course')),
                ('user', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'enrollment',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('file_id', models.AutoField(primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to=application.models.dataset_path)),
                ('challenge', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Challenges')),
                ('course', models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Course')),
            ],
            options={
                'db_table': 'dataset',
            },
        ),
        migrations.AddField(
            model_name='challenges',
            name='course',
            field=models.ForeignKey(error_messages={'invalide': "n'éxiste pas"}, on_delete=django.db.models.deletion.CASCADE, to='application.Course'),
        ),
        migrations.AddConstraint(
            model_name='management',
            constraint=models.UniqueConstraint(fields=('user', 'course'), name='UNIQUE_MANAGEMENT_ENTRY'),
        ),
        migrations.AddConstraint(
            model_name='groups',
            constraint=models.UniqueConstraint(fields=('user', 'challenge'), name='UNIQUE_GROUP_ENTRY'),
        ),
        migrations.AddConstraint(
            model_name='enrollment',
            constraint=models.UniqueConstraint(fields=('user', 'course'), name='UNIQUE_ENROLLMENT_ENTRY'),
        ),
        migrations.AlterUniqueTogether(
            name='challenges',
            unique_together={('title', 'course'), ('challenge_id', 'course')},
        ),
    ]
